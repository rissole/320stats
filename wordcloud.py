import reimport stringfrom collections import defaultdict# From Jonathan Feinberg's cue.language apparentlystop_words = re.compile(r"^(1|2|3|4|5|6|7|8|9|0|i|im|u|ive|ill|get|got|me|my|myself|we|us|our|ours|ourselves|you|your|yours|yourself|yourselves|he|him|his|himself|she|her|hers|herself|it|its|itself|they|them|their|theirs|themselves|what|which|who|whom|whose|this|that|these|those|am|is|are|was|were|be|been|being|have|has|had|having|do|does|did|doing|will|would|should|can|could|ought|i'm|you're|youre|he's|she's|it's|we're|they're|i've|you've|we've|they've|i'd|you'd|he'd|she'd|we'd|they'd|i'll|you'll|he'll|she'll|we'll|they'll|isn't|aren't|wasn't|weren't|hasn't|haven't|hadn't|doesn't|don't|didn't|won't|wouldn't|shan't|shouldn't|can't|cannot|couldn't|mustn't|let's|that's|who's|what's|here's|there's|when's|where's|why's|how's|a|an|the|and|but|if|or|because|as|until|while|of|at|by|for|with|about|against|between|into|through|during|before|after|above|below|to|from|up|upon|down|in|out|on|off|over|under|again|further|then|once|here|there|when|where|why|how|all|any|both|each|few|more|most|other|some|such|no|nor|not|only|own|same|so|than|too|very|say|says|said|shall)$")discard = re.compile('^(https?:)')# found this on stack overflow what of itpunct_regex = re.compile('[%s]' % re.escape(string.punctuation))max_words = 250def get_top_words(text):       frequency = defaultdict(int) # word -> number of times that word is used    for word in text.split():        if discard.search(word) or stop_words.search(word):            continue        word = punct_regex.sub('', word)        if len(word) == 0:            continue        frequency[word] += 1            frequency = sorted(frequency.iteritems(), key=lambda x: x[1], reverse=True)    return frequency[:max_words]