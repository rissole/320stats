{% extends "base.htm" %}{% block title %}{{ name }}{% endblock %}{% block content %}    <div class="jumbotron text-center">        <img src="https://graph.facebook.com/{{ uid }}/picture?width=200&height=200" class="img-circle" />        <h1>{{ name }}</h1>    </div>    <div class="well">        <h1>Comments Word Cloud</h1>        <center><div id="wordcloud-comments"></div></center>    </div>{% endblock %}{% block scripts %}    {{ super() }}    <script src="http://d3js.org/d3.v3.min.js" charset="utf-8"></script>    <script src="{{url_for('static', filename='d3.layout.cloud.js')}}"></script>    <script>    var w = 960, h = 600;    var words = JSON.parse({{ words|tojson|safe }});    var fill = d3.scale.category20();        var svg = d3.select("#wordcloud-comments").append("svg")    .attr("width", w)    .attr("height", h);    var background = svg.append("g"),        vis = svg.append("g")        .attr("transform", "translate(" + [w >> 1, h >> 1] + ")");    var layout = d3.layout.cloud()     .timeInterval(10)     .size([w, h])     .fontSize(function(d) { return fontSize(+d.size); })     .text(function(d) { return d.text; })     .on("end", draw);        layout      .font("Impact")    fontSize = d3.scale['log']().range([10, 100]);    fontSize.domain([+words[words.length - 1].size, +words[0].size]);    layout.stop().words(words).start();    function draw(data, bounds) {        scale = bounds ? Math.min(          w / Math.abs(bounds[1].x - w / 2),          w / Math.abs(bounds[0].x - w / 2),          h / Math.abs(bounds[1].y - h / 2),          h / Math.abs(bounds[0].y - h / 2)) / 2 : 1;        words = data;        var text = vis.selectAll("text")          .data(words, function(d) { return d.text.toLowerCase(); });        text.transition()          .duration(1000)          .attr("transform", function(d) { return "translate(" + [d.x, d.y] + ")rotate(" + d.rotate + ")"; })          .style("font-size", function(d) { return d.size + "px"; });        text.enter().append("text")          .attr("text-anchor", "middle")          .attr("transform", function(d) { return "translate(" + [d.x, d.y] + ")rotate(" + d.rotate + ")"; })          .style("font-size", function(d) { return d.size + "px"; })          .on("click", function(d) {            load(d.text);          })          .style("opacity", 1e-6)        .transition()          .duration(1000)          .style("opacity", 1);        text.style("font-family", function(d) { return d.font; })          .style("fill", function(d) { return fill(d.text.toLowerCase()); })          .text(function(d) { return d.text; });        var exitGroup = background.append("g")          .attr("transform", vis.attr("transform"));        var exitGroupNode = exitGroup.node();        text.exit().each(function() {        exitGroupNode.appendChild(this);        });        exitGroup.transition()          .duration(1000)          .style("opacity", 1e-6)          .remove();        vis.transition()          .delay(1000)          .duration(750)          .attr("transform", "translate(" + [w >> 1, h >> 1] + ")scale(" + scale + ")");        }    </script>{% endblock %}